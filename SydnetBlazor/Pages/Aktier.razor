@page "/Aktier"
@attribute [Authorize]
@using SydnetBlazor.Data
@using Domain.Models
@using Domain.Models
@using GRPCService.LogicInterfaces
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@inject IAktieService AktieService
@inject IBrugerLogic brugerLogic





<body>

<h3>Aktier</h3>
<DataGrid TItem="Aktie" Data="@aktier" @bind-SelectedRow="@selectedAktie" Filterable Responsive>
    <DataGridColumn Field="@nameof( Aktie.Firma )" Caption="Firma" Editable="false" ></DataGridColumn>
    <DataGridColumn Field="@nameof( Aktie.Navn)" Caption="Forkortelse" Editable="false" Filterable="false"></DataGridColumn>
    <DataGridColumn Field="@nameof( Aktie.Pris)" Caption="Pris" Editable="false" Filterable="false"></DataGridColumn>
    <DataGridColumn Field="@nameof( Aktie.High )" Caption="Høj" Editable="false" Filterable="false"></DataGridColumn>
    <DataGridColumn Field="@nameof( Aktie.Low)" Caption="Lav" Editable="false" Filterable="false"></DataGridColumn>
    <DataGridColumn Filterable="false"><DisplayTemplate>
        <Button Color="Color.Success" Clicked="@(()=>ShowModal())">
            Køb
        </Button>
    </DisplayTemplate></DataGridColumn>
</DataGrid>
</body>

<Modal @bind-Visible="@modalVisible">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Køb aktier</ModalTitle>
          
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Firma</FieldLabel>
                <TextEdit Text="@selectedAktie.Firma" ReadOnly="true" />
            </Field>
            <Field>
                <FieldLabel>Pris</FieldLabel>
                <TextEdit Text="@selectedAktie.Pris.ToString()" ReadOnly="true"/>
            </Field>
            
            <Field>
                <FieldLabel>Antal</FieldLabel>
                <NumericEdit @bind-Value="AktieAntal" @onchange="updatePrice" TValue="int"/>
            </Field>
            
            <Field>
                <FieldLabel>Ordre Pris</FieldLabel>
                <NumericEdit @bind-Value="AktieTotal" TValue="double" ReadOnly="true"/>
            </Field>
            
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Luk</Button>
            <Button Color="Color.Success" Clicked="@buyAktie">Køb</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Alert Color="Color.Danger" @bind-Visible="@errorBuy">
    <AlertMessage>Fejl!</AlertMessage>
    <AlertDescription>Du har ikke nok penge til at udføre denne handling!</AlertDescription>
    <CloseButton />
</Alert>

<Alert Color="Color.Success" @bind-Visible="@successBuy">
    <AlertMessage>Succes!</AlertMessage>
        <AlertDescription>Aktie købt!</AlertDescription>
    <CloseButton />
</Alert>

@code{

    
    bool errorBuy = false;
    bool successBuy = false;
    private List<Aktie>? aktier;
    private string msg = "";
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    public string? name = "";
    private IEnumerable<Claim>? userClaims;

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            AuthenticationState authState = await AuthState;
            ClaimsPrincipal user = authState.User;

            userClaims = user.Claims;
            name = user.Identity!.Name!;
            aktier = await AktieService.GetAllAktier();
            
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void buyAktie()
    {
        
        Aktie aktie = new Aktie()
        {
            Firma = selectedAktie.Firma,
            High = selectedAktie.High,
            Low = selectedAktie.Low,
            Navn = selectedAktie.Navn,
            Pris = selectedAktie.Pris
         
        };
        
        
       
        int depotID = brugerLogic.GetBruger(name).Result.DepotID;
        double saldo = brugerLogic.GetBruger(name).Result.Saldo;

        if (saldo<AktieTotal)
        {
            errorBuy = true;
        }
        else if (saldo>=AktieTotal)
        {
            AktieService.buyAktie(AktieAntal, depotID,aktie);
            successBuy = true;
            HideModal();
        }
       
        
     
    }


    public Aktie? selectedAktie = new Aktie();

    public int AktieAntal = 0;
    public double AktieTotal = 0.00;

    private bool modalVisible;

    private Task ShowModal()
    {
        
        modalVisible = true;

        return Task.CompletedTask;
    }

    private Task HideModal()
    {
        modalVisible = false;

        return Task.CompletedTask;
    }
    
    private void updatePrice()
    {
        AktieTotal = AktieAntal * selectedAktie.Pris;
    }
    
}