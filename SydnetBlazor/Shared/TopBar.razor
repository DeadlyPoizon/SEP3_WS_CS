@using SydnetBlazor.Services
@using GRPCService.LogicInterfaces
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@using Domain.Models
@inject IAuthService authService
@inject IBrugerLogic brugerLogic
@inject NavigationManager navMgr
@inject IUserService userService;


<Bar Breakpoint="Breakpoint.Desktop"
     Background="Background.Light"
     ThemeContrast="ThemeContrast.Light">
    <BarMenu>
        <BarStart>
        </BarStart>
        <BarEnd Padding="Padding.Is2.FromEnd">
            <AuthorizeView>
                <Authorized>
                    <BarItem>
                        <BarDropdown>
                            <BarDropdownToggle>@context.User.Identity!.Name</BarDropdownToggle>
                            <BarDropdownMenu>
                                <BarDropdownItem Clicked="@LogoutAsync">Logout</BarDropdownItem>
                            </BarDropdownMenu>
                        </BarDropdown>
                    </BarItem>
                </Authorized>
                <NotAuthorized>
                    <BarItem>
                        <Button Color="Color.Primary" onclick="@ShowModal">Sign up</Button>
                        <Button Color="Color.Secondary" onclick="@ShowModal2">Log in</Button>
                    </BarItem>
                </NotAuthorized>
            </AuthorizeView>
        </BarEnd>
    </BarMenu>
</Bar>

<Modal @ref="loginModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Login</ModalTitle>

        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Username</FieldLabel>
                <TextEdit @bind-Text="userName" MaxLength="25" Placeholder="Username">
                </TextEdit>
            </Field>
            <Field>
                <FieldLabel>Password</FieldLabel>
                <TextEdit @bind-Text="password" Role="TextRole.Password" Placeholder="Password">
                    <label style="color: red">
                                            @errorLabel
                                        </label>
                </TextEdit>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal2">Luk</Button>
            <Button Color="Color.Primary" Clicked="@LoginAsync">Login</Button>
        </ModalFooter>
    </ModalContent>
</Modal>


<Modal @ref="registerModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Sign Up</ModalTitle>

        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Username</FieldLabel>
                <TextEdit @bind-Text="userName" MaxLength="25" Placeholder="Username - Between 6-25 Characters">
                </TextEdit>
            </Field>
            <Field>
                <FieldLabel>Password</FieldLabel>
                <TextEdit @bind-Text="password" Role="TextRole.Password" Placeholder="Password - Minimum 8 Characters"/>
                <label style="color: red">
                    @errorLabel
                    </label>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Luk</Button>
            <Button Color="Color.Primary" Clicked="@RegisterAsync">Opret Bruger</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code{

    private string userName;
    private string password;
    private string errorLabel;
    private string color = "";

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    public static string? name = "";
    private IEnumerable<Claim>? userClaims;
    public static double saldo = 0;


    private async Task LoginAsync()
    {
        errorLabel = "";
        try
        {
            await authService.LoginAsync(userName, password);
            navMgr.NavigateTo("/");
            var authState = await AuthState;
            var user = authState.User;

            userClaims = user.Claims;
            name = user.Identity!.Name!;
            saldo = Math.Round(brugerLogic.GetBruger(name).Result.Saldo, 2);
            userName = "";
            password = "";
            await HideModal2();
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            errorLabel = "Indtastede Oplysninger Er Forkerte";
        }
    }


    public double getSaldo()
    {
        return saldo;
    }

    public async Task setSaldo()
    {
       
        saldo = Math.Round(brugerLogic.GetBruger(name!).Result.Saldo, 2);
        StateHasChanged();
    }

    private async Task RegisterAsync()
    {
        errorLabel = "";
        try
        {
            if (userName.Length>25||userName.Length<7)
            {
                errorLabel = "Brugernavn enten for kort eller for langt";
            }
            else if (password.Length<8)
            {
                errorLabel = "Password For Kort";
            }
            else
            {
                await userService.Create(new Bruger(userName, password));
                navMgr.NavigateTo("/");
               
                {
                    HideModal();
                    userName = "";
                    password = "";
                }
                
            }
           
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            errorLabel = "Indtastede Oplysninger Overholder Ikke Kravene";
        }
    }

    private Modal registerModal;
    private Modal loginModal;

    private Task ShowModal()
    {
        registerModal.Show();

        return Task.CompletedTask;
    }

    private Task HideModal()
    {
        registerModal.Hide();

        return Task.CompletedTask;
    }

    private Task ShowModal2()
    {
        loginModal.Show();

        return Task.CompletedTask;
    }

    private Task HideModal2()
    {
        loginModal.Hide();

        return Task.CompletedTask;
    }

    private async Task LogoutAsync()
    {
        await authService.LogoutAsync();
        navMgr.NavigateTo("/");
    }

}